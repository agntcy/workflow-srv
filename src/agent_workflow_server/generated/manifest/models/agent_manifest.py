# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

# coding: utf-8

"""
    Agent Manifest Definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from agent_workflow_server.generated.manifest.models.locator import Locator
from agent_workflow_server.generated.manifest.models.manifest import Manifest
from agent_workflow_server.generated.manifest.models.skill import Skill
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AgentManifest(BaseModel):
    """
    AgentManifest
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = None
    authors: List[StrictStr]
    created_at: StrictStr
    description: StrictStr
    extensions: List[Manifest]
    locators: List[Locator]
    name: StrictStr
    schema_version: StrictStr
    skills: List[Skill]
    version: StrictStr
    __properties: ClassVar[List[str]] = ["annotations", "authors", "created_at", "description", "extensions", "locators", "name", "schema_version", "skills", "version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AgentManifest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in extensions (list)
        _items = []
        if self.extensions:
            for _item in self.extensions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in locators (list)
        _items = []
        if self.locators:
            for _item in self.locators:
                if _item:
                    _items.append(_item.to_dict())
            _dict['locators'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in skills (list)
        _items = []
        if self.skills:
            for _item in self.skills:
                if _item:
                    _items.append(_item.to_dict())
            _dict['skills'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AgentManifest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "authors": obj.get("authors"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "extensions": [Manifest.from_dict(_item) for _item in obj.get("extensions")] if obj.get("extensions") is not None else None,
            "locators": [Locator.from_dict(_item) for _item in obj.get("locators")] if obj.get("locators") is not None else None,
            "name": obj.get("name"),
            "schema_version": obj.get("schema_version"),
            "skills": [Skill.from_dict(_item) for _item in obj.get("skills")] if obj.get("skills") is not None else None,
            "version": obj.get("version")
        })
        return _obj


