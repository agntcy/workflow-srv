# coding: utf-8

"""
    Agent Manifest Definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from agent_workflow_server.generated.manifest.models.agent_acp_specs import AgentACPSpecs
from agent_workflow_server.generated.manifest.models.agent_deployment import AgentDeployment
from agent_workflow_server.generated.manifest.models.agent_metadata import AgentMetadata
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AgentManifest(BaseModel):
    """
    Describe all the ACP specs of an agent, including schemas and protocol features.
    """ # noqa: E501
    metadata: AgentMetadata
    specs: AgentACPSpecs
    deployment: Optional[AgentDeployment] = None
    __properties: ClassVar[List[str]] = ["metadata", "specs", "deployment"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AgentManifest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specs
        if self.specs:
            _dict['specs'] = self.specs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deployment
        if self.deployment:
            _dict['deployment'] = self.deployment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AgentManifest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metadata": AgentMetadata.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "specs": AgentACPSpecs.from_dict(obj.get("specs")) if obj.get("specs") is not None else None,
            "deployment": AgentDeployment.from_dict(obj.get("deployment")) if obj.get("deployment") is not None else None
        })
        return _obj


