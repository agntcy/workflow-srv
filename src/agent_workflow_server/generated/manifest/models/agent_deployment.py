# coding: utf-8

"""
    Agent Manifest Definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from agent_workflow_server.generated.manifest.models.agent_dependency import AgentDependency
from agent_workflow_server.generated.manifest.models.agent_deployment_deployment_options_inner import AgentDeploymentDeploymentOptionsInner
from agent_workflow_server.generated.manifest.models.env_var import EnvVar
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AgentDeployment(BaseModel):
    """
    Describe all the details needed to deploy an agent by the Agent Workflow Server
    """ # noqa: E501
    deployment_options: List[AgentDeploymentDeploymentOptionsInner] = Field(description="List of possible methods to instantiate or consume the agent.  Any of the available option could be used. Every option could be associated with a unique name within this agent. If present, when another manifest refers to this manifest, it can also select the preferred deployment option.")
    env_vars: Optional[List[EnvVar]] = Field(default=None, description="List of possible environment variables that the agent may require to be set before it can be used.")
    dependencies: Optional[List[AgentDependency]] = Field(default=None, description="List of all other agents this agent depends on")
    __properties: ClassVar[List[str]] = ["deployment_options", "env_vars", "dependencies"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AgentDeployment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deployment_options (list)
        _items = []
        if self.deployment_options:
            for _item in self.deployment_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['deployment_options'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in env_vars (list)
        _items = []
        if self.env_vars:
            for _item in self.env_vars:
                if _item:
                    _items.append(_item.to_dict())
            _dict['env_vars'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dependencies (list)
        _items = []
        if self.dependencies:
            for _item in self.dependencies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dependencies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AgentDeployment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deployment_options": [AgentDeploymentDeploymentOptionsInner.from_dict(_item) for _item in obj.get("deployment_options")] if obj.get("deployment_options") is not None else None,
            "env_vars": [EnvVar.from_dict(_item) for _item in obj.get("env_vars")] if obj.get("env_vars") is not None else None,
            "dependencies": [AgentDependency.from_dict(_item) for _item in obj.get("dependencies")] if obj.get("dependencies") is not None else None
        })
        return _obj


